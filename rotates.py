{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "24c572ea",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "111 -> 1 -> 2 -> 5 -> 5 -> 7 -> 8 -> 9 -> 10\n",
      "10 -> 9 -> 8 -> 7 -> 5 -> 5 -> 2 -> 1 -> 111\n",
      "7 -> 5 -> 5 -> 2 -> 1 -> 111 -> 10 -> 9 -> 8\n"
     ]
    }
   ],
   "source": [
    "'''\n",
    "Linked List implementation\n",
    "'''\n",
    "\n",
    "class Node:\n",
    "    \n",
    "    \n",
    "    def __init__(self,data):\n",
    "        self.data=data\n",
    "        self.next=None\n",
    "        \n",
    "        \n",
    "        \n",
    "class Linked_List:\n",
    "    \n",
    "    \n",
    "    def __init__(self):\n",
    "        self.head=None\n",
    "        \n",
    "        \n",
    "        \n",
    "        \n",
    "    def insert(self,val):#method to insert only one value\n",
    "        if self.head==None:\n",
    "            self.head=Node(val)\n",
    "        else:\n",
    "            temp=self.head\n",
    "            while temp.next!=None:\n",
    "                temp=temp.next\n",
    "            temp.next=Node(val)\n",
    "            \n",
    "            #method overloading\n",
    "            \n",
    "    def insert(self,*l):#method to insert more than one value\n",
    "        l=list(l)\n",
    "        for val in l:\n",
    "            if self.head==None:\n",
    "                self.head=Node(val)\n",
    "            else:\n",
    "                temp=self.head\n",
    "                while temp.next!=None:\n",
    "                    temp=temp.next\n",
    "                temp.next=Node(val)\n",
    "           \n",
    "                \n",
    "    def insert_at_begin(self,val):\n",
    "        node=Node(val)\n",
    "        node.next=self.head\n",
    "        self.head=node\n",
    "        \n",
    "        \n",
    "    def reverse(self):\n",
    "        prev,curr,next_node=None,self.head,None\n",
    "        while curr!=None:\n",
    "            next_node=curr.next\n",
    "            curr.next=prev\n",
    "            \n",
    "            prev=curr\n",
    "            curr=next_node\n",
    "        self.head=prev\n",
    "        \n",
    "    def rotate(self,k):\n",
    "        count=1\n",
    "        temp=self.head\n",
    "        while count<k and temp !=None:\n",
    "            count+=1\n",
    "            temp=temp.next\n",
    "        kthnode=temp\n",
    "        while temp.next !=None:\n",
    "            temp=temp.next\n",
    "        temp.next=self.head\n",
    "        self.head=kthnode.next\n",
    "        kthnode.next=None\n",
    "    \n",
    "    def __repr__(self):#magic method to print object\n",
    "        temp=self.head\n",
    "        ans=''\n",
    "        while temp.next!=None:\n",
    "            ans+=str(temp.data) + \" -> \"\n",
    "            temp=temp.next\n",
    "        ans+=str(temp.data)\n",
    "        return ans\n",
    "    \n",
    "    \n",
    "ll=Linked_List()\n",
    "ll.insert(1)\n",
    "ll.insert(2)\n",
    "ll.insert(5)\n",
    "ll.insert(5,7,8,9,10)\n",
    "ll.insert_at_begin(111)\n",
    "print(ll)\n",
    "ll.reverse()\n",
    "print(ll)\n",
    "ll.rotate(3)\n",
    "print(ll)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dd29f483",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
